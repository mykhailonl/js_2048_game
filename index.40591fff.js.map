{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable padding-line-between-statements */ function $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable no-console */ /* eslint-disable padding-line-between-statements */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        if (initialState.length) this.initialState = initialState;\n        else this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.status = \"idle\";\n        this.score = 0;\n        this.currentState = this.initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /**\n   * Checks the games status and shows win/lose message\n   */ key: \"isGameOver\",\n            value: function isGameOver() {\n                if (this.getStatus() === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n                else if (this.getStatus() === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            }\n        },\n        {\n            /**\n   *\n   * @returns true if there is 2048 tile on the field, false otherwise\n   */ key: \"checkWinCondition\",\n            value: function checkWinCondition() {\n                return this.currentState.some(function(row) {\n                    return row.includes(2048);\n                });\n            }\n        },\n        {\n            /**\n   *\n   * @returns true if player has at least 1 move, othrwise false\n   */ key: \"checkMovePossibility\",\n            value: function checkMovePossibility() {\n                if (this.getEmptyCellsCoordinates().length > 0) return true;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var currentValue = this.checkCellByCoordinates([\n                        row,\n                        col\n                    ]);\n                    if (col < 3 && currentValue === this.checkCellByCoordinates([\n                        row,\n                        col + 1\n                    ])) return true;\n                    if (row < 3 && currentValue === this.checkCellByCoordinates([\n                        row + 1,\n                        col\n                    ])) return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * @description Moves all tiles down.\n   * Starting from the bottom-right corner, moving left and up,\n   * each non-empty cell is moved down as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */ key: \"moveDown\",\n            value: function moveDown() {\n                if (this.getStatus() !== \"playing\") return;\n                var previousState = JSON.stringify(this.currentState);\n                for(var col = 3; col >= 0; col--){\n                    var mergedThisMove = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var row = 3; row >= 0; row--){\n                        var currentValue = this.checkCellByCoordinates([\n                            row,\n                            col\n                        ]);\n                        if (currentValue !== 0) {\n                            var currentRow = row;\n                            var nextRow = currentRow + 1;\n                            // Move the tile down until it hits a non-empty cell\n                            //  or the bottom of the board\n                            while(nextRow <= 3 && this.checkCellByCoordinates([\n                                nextRow,\n                                col\n                            ]) === 0){\n                                this.currentState[nextRow][col] = currentValue;\n                                this.currentState[currentRow][col] = 0;\n                                currentRow = nextRow;\n                                nextRow++;\n                            }\n                            // Check for a possible merge\n                            if (nextRow <= 3 && this.checkCellByCoordinates([\n                                nextRow,\n                                col\n                            ]) === currentValue && !mergedThisMove[nextRow]) {\n                                // Merge\n                                this.currentState[nextRow][col] *= 2;\n                                this.currentState[currentRow][col] = 0;\n                                this.score += this.currentState[nextRow][col];\n                                mergedThisMove[nextRow] = true;\n                            }\n                        }\n                    }\n                }\n                var newState = JSON.stringify(this.currentState);\n                if (previousState === newState) return;\n                if (this.checkWinCondition()) this.status = \"win\";\n                this.generateAndPositionNewTile();\n                this.updateTheBoard();\n                if (!this.checkMovePossibility()) this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * @description Moves all tiles up.\n   * Starting from the top-left corner, moving right and down,\n   * each non-empty cell is moved up as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */ key: \"moveUp\",\n            value: function moveUp() {\n                if (this.getStatus() !== \"playing\") return;\n                var previousState = JSON.stringify(this.currentState);\n                for(var col = 0; col < 4; col++){\n                    var mergedThisMove = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var row = 0; row < 4; row++){\n                        var currentValue = this.checkCellByCoordinates([\n                            row,\n                            col\n                        ]);\n                        if (currentValue !== 0) {\n                            var currentRow = row;\n                            var nextRow = currentRow - 1;\n                            // Move the tile up until it hits a non-empty cell\n                            // or the top of the board\n                            while(nextRow >= 0 && this.checkCellByCoordinates([\n                                nextRow,\n                                col\n                            ]) === 0){\n                                this.currentState[nextRow][col] = currentValue;\n                                this.currentState[currentRow][col] = 0;\n                                currentRow = nextRow;\n                                nextRow--;\n                            }\n                            // Check for a possible merge\n                            if (nextRow >= 0 && this.checkCellByCoordinates([\n                                nextRow,\n                                col\n                            ]) === currentValue && !mergedThisMove[nextRow]) {\n                                // Merge\n                                this.currentState[nextRow][col] *= 2;\n                                this.currentState[currentRow][col] = 0;\n                                this.score += this.currentState[nextRow][col];\n                                mergedThisMove[nextRow] = true;\n                            }\n                        }\n                    }\n                }\n                var newState = JSON.stringify(this.currentState);\n                if (previousState === newState) return;\n                if (this.checkWinCondition()) this.status = \"win\";\n                this.generateAndPositionNewTile();\n                this.updateTheBoard();\n                if (!this.checkMovePossibility()) this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * @description Moves all tiles left.\n   * Starting from the top-left corner, moving right and down,\n   * each non-empty cell is moved left as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */ key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.currentState[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(4 - newRow.length).fill(0)));\n                    _this.currentState[row] = newRow;\n                    var mergedThisMove = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var col = 0; col < 3; col++){\n                        var currentValue = _this.checkCellByCoordinates([\n                            row,\n                            col\n                        ]);\n                        if (currentValue !== 0 && _this.checkCellByCoordinates([\n                            row,\n                            col + 1\n                        ]) === currentValue && !mergedThisMove[col]) {\n                            _this.currentState[row][col] *= 2;\n                            _this.currentState[row][col + 1] = 0;\n                            _this.score += _this.currentState[row][col];\n                            mergedThisMove[col] = true;\n                        }\n                    }\n                    newRow = _this.currentState[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(4 - newRow.length).fill(0)));\n                    _this.currentState[row] = newRow;\n                };\n                if (this.getStatus() !== \"playing\") return;\n                var previousState = JSON.stringify(this.currentState);\n                for(var row = 0; row < 4; row++)_loop(row);\n                var newState = JSON.stringify(this.currentState);\n                if (previousState === newState) return;\n                if (this.checkWinCondition()) this.status = \"win\";\n                this.generateAndPositionNewTile();\n                this.updateTheBoard();\n                if (!this.checkMovePossibility()) this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * @description Moves all tiles right.\n   * Starting from the top-right corner, moving left and down,\n   * each non-empty cell is moved right as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */ key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.currentState[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(4 - newRow.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow));\n                    _this.currentState[row] = newRow;\n                    var mergedThisMove = [\n                        false,\n                        false,\n                        false,\n                        false\n                    ];\n                    for(var col = 3; col > 0; col--){\n                        var currentValue = _this.checkCellByCoordinates([\n                            row,\n                            col\n                        ]);\n                        if (currentValue !== 0 && _this.checkCellByCoordinates([\n                            row,\n                            col - 1\n                        ]) === currentValue && !mergedThisMove[col]) {\n                            _this.currentState[row][col] *= 2;\n                            _this.currentState[row][col - 1] = 0;\n                            _this.score += _this.currentState[row][col];\n                            mergedThisMove[col] = true;\n                        }\n                    }\n                    newRow = _this.currentState[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(4 - newRow.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow));\n                    _this.currentState[row] = newRow;\n                };\n                if (this.getStatus() !== \"playing\") return;\n                var previousState = JSON.stringify(this.currentState);\n                for(var row = 0; row < 4; row++)_loop(row);\n                var newState = JSON.stringify(this.currentState);\n                if (previousState === newState) return;\n                if (this.checkWinCondition()) this.status = \"win\";\n                this.generateAndPositionNewTile();\n                this.updateTheBoard();\n                if (!this.checkMovePossibility()) this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * @description Simply holds an update of the visual score,\n   * called after each move in the main file.\n   */ key: \"updateTheScore\",\n            value: function updateTheScore() {\n                var scoreElement = document.querySelector(\".game-score\");\n                scoreElement.innerText = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number} returns game score.\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]} returns current game board state.\n   */ key: \"getState\",\n            value: function getState() {\n                return this.currentState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Calls two\n   *  @method generateNewTile\n   *\n   * and\n   *  @method positionNewTile\n   *\n   * in a chain to simplify the code read.\n   */ key: \"generateAndPositionNewTile\",\n            value: function generateAndPositionNewTile() {\n                this.positionNewTile(this.generateNewTile());\n            }\n        },\n        {\n            /**\n   * Creates and positions 2 new cells on the field.\n   */ key: \"initializeBoard\",\n            value: function initializeBoard() {\n                this.generateAndPositionNewTile();\n                this.generateAndPositionNewTile();\n            }\n        },\n        {\n            /**\n   * @description Starts the game.\n   * Changing a status, initializing the board with 2 random cells\n   * and updating UI.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.initializeBoard();\n                this.updateTheBoard();\n            }\n        },\n        {\n            /**\n   * @description Resets the game.\n   * Setting a score to 0, clearing the field and calling a start() again.\n   */ key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.status = \"idle\";\n                this.currentState = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.updateTheBoard();\n            // this.updateTheScore();\n            }\n        },\n        {\n            /**\n   * @description Mapping through all non-empty cells, asiging 0 value to them,\n   * calling updateTheBoard() which check and fixes the styles\n   */ key: \"resetTheField\",\n            value: function resetTheField() {\n                var cellsToReset = this.getNonEmptyCells();\n                var currentFieldState = this.getState();\n                cellsToReset.forEach(function(cell) {\n                    currentFieldState[cell[0]][cell[1]] = 0;\n                });\n                this.updateTheBoard();\n            }\n        },\n        {\n            /**\n   * @returns {number} 2 or 4, 4 has 10% chance to be generated\n   */ key: \"generateNewTile\",\n            value: function generateNewTile() {\n                return Math.random() < 0.1 ? 4 : 2;\n            }\n        },\n        {\n            /**\n   * Sets new random position for the passed cellValue\n   * from available empty cell spots\n   * @param {number} newTileValue - number value of new cell to place\n   * @example 2, 4, 8, etc\n   */ key: \"positionNewTile\",\n            value: function positionNewTile(newTileValue) {\n                var availableFields = this.getEmptyCellsCoordinates();\n                var position = availableFields[Math.floor(Math.random() * availableFields.length)];\n                if (availableFields.length) this.getState()[position[0]][position[1]] = newTileValue;\n                else this.checkMovePossibility();\n            }\n        },\n        {\n            /**\n   * @example[[0, 1], [3,2]] etc\n   * @returns {number[][]} returns all empty cell coordinates array\n   */ key: \"getEmptyCellsCoordinates\",\n            value: function getEmptyCellsCoordinates() {\n                var possibleCoordinates = [];\n                for(var row = 0; row < this.getState().length; row++){\n                    for(var cell = 0; cell < this.getState()[row].length; cell++)if (this.currentState[row][cell] === 0) possibleCoordinates.push([\n                        row,\n                        cell\n                    ]);\n                }\n                return possibleCoordinates;\n            }\n        },\n        {\n            /**\n   * @example [[0, 1], [3,2]] etc\n   * @returns {number[][]} returns all non-empty cell coordinates array\n   */ key: \"getNonEmptyCells\",\n            value: function getNonEmptyCells() {\n                var cellsCoordinates = [];\n                for(var row = 0; row < this.getState().length; row++){\n                    for(var cell = 0; cell < this.getState()[row].length; cell++)if (this.currentState[row][cell] !== 0) cellsCoordinates.push([\n                        row,\n                        cell\n                    ]);\n                }\n                return cellsCoordinates;\n            }\n        },\n        {\n            /**\n   * @param {number[]} coordinatesToCheck - array of the cell coordinates\n   *  [x, y]\n   * @returns {number} cell value by the coordinates\n   */ key: \"checkCellByCoordinates\",\n            value: function checkCellByCoordinates(param) {\n                var _param = (0, $efec029548ccee7f$export$71511d61b312f219)(param, 2), row = _param[0], col = _param[1];\n                if (row >= 0 && row < 4 && col >= 0 && col < 4) return this.currentState[row][col];\n                return null;\n            }\n        },\n        {\n            /**\n   * Updates UI of the board.\n   * @description Mapping through all rows/cells, clearing previous styles,\n   * changing cells according to updated game board.\n   */ key: \"updateTheBoard\",\n            value: function updateTheBoard() {\n                var gameField = (0, $227c6742e0ff6f82$export$71511d61b312f219)(document.querySelectorAll(\"tr.field-row\"));\n                var rows = this.currentState;\n                if (gameField.length === 0) return;\n                // Going through rows\n                for(var i = 0; i < rows.length; i++)// Going through cells in row\n                for(var j = 0; j < rows[i].length; j++){\n                    var currentCell = gameField[i].children[j];\n                    var currentDataCell = rows[i][j];\n                    // Removing all previous classes and setting a base class for the cell\n                    currentCell.className = \"field-cell\";\n                    // Adding an extra class, if cell is not empty\n                    if (currentDataCell !== 0) {\n                        currentCell.classList.add(\"field-cell--\".concat(currentDataCell));\n                        currentCell.innerText = currentDataCell;\n                    } else currentCell.innerText = \"\";\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$changeStartButton = function(button) {\n    button.classList.remove(\"start\");\n    button.classList.add(\"restart\");\n    button.innerText = \"Restart\";\n};\nvar $197cd56b15c33885$var$hideMessageContainer = function() {\n    var messageContainer = (0, $227c6742e0ff6f82$export$71511d61b312f219)(document.querySelectorAll(\".message\"));\n    messageContainer.forEach(function(message) {\n        return message.classList.add(\"hidden\");\n    });\n};\nvar $197cd56b15c33885$var$initializeGame = function() {\n    var startButton = document.querySelector(\".button\");\n    if (startButton) startButton.addEventListener(\"click\", function() {\n        if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n            $197cd56b15c33885$var$game.start();\n            $197cd56b15c33885$var$changeStartButton(startButton);\n            $197cd56b15c33885$var$hideMessageContainer();\n        } else if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n            $197cd56b15c33885$var$game.restart();\n            $197cd56b15c33885$var$game.start();\n        } else if ($197cd56b15c33885$var$game.getStatus() === \"lose\") {\n            $197cd56b15c33885$var$game.restart();\n            $197cd56b15c33885$var$game.start();\n            $197cd56b15c33885$var$hideMessageContainer();\n        }\n    });\n};\ndocument.addEventListener(\"DOMContentLoaded\", $197cd56b15c33885$var$initializeGame);\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"keydown\", function(event) {\n    if ([\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"ArrowLeft\",\n        \"ArrowRight\"\n    ].includes(event.key)) event.preventDefault();\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    switch(event.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\" || $197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$game.isGameOver();\n    $197cd56b15c33885$var$game.updateTheScore();\n    $197cd56b15c33885$var$game.updateTheBoard();\n});\n\n})();\n//# sourceMappingURL=index.40591fff.js.map\n","/* eslint-disable padding-line-between-statements */\n'use strict';\n\nimport Game from '../modules/Game.class';\nconst game = new Game();\n\nconst changeStartButton = (button) => {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.innerText = 'Restart';\n};\n\nconst hideMessageContainer = () => {\n  const messageContainer = [...document.querySelectorAll('.message')];\n  messageContainer.forEach((message) => message.classList.add('hidden'));\n};\n\nconst initializeGame = () => {\n  const startButton = document.querySelector('.button');\n\n  if (startButton) {\n    startButton.addEventListener('click', () => {\n      if (game.getStatus() === 'idle') {\n        game.start();\n\n        changeStartButton(startButton);\n        hideMessageContainer();\n      } else if (game.getStatus() === 'playing') {\n        game.restart();\n\n        game.start();\n      } else if (game.getStatus() === 'lose') {\n        game.restart();\n\n        game.start();\n        hideMessageContainer();\n      }\n    });\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n    event.preventDefault();\n  }\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  if (game.getStatus() === 'win' || game.getStatus() === 'lose') {\n    game.isGameOver();\n  }\n\n  game.updateTheScore();\n  game.updateTheBoard();\n});\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","/* eslint-disable no-console */\n/* eslint-disable padding-line-between-statements */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = []) {\n    if (initialState.length) {\n      this.initialState = initialState;\n    } else {\n      this.initialState = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n    this.status = 'idle';\n    this.score = 0;\n    this.currentState = this.initialState.map((row) => [...row]);\n  }\n\n  /**\n   * Checks the games status and shows win/lose message\n   */\n  isGameOver() {\n    if (this.getStatus() === 'lose') {\n      document.querySelector('.message-lose').classList.remove('hidden');\n    } else if (this.getStatus() === 'win') {\n      document.querySelector('.message-win').classList.remove('hidden');\n    }\n  }\n\n  /**\n   *\n   * @returns true if there is 2048 tile on the field, false otherwise\n   */\n  checkWinCondition() {\n    return this.currentState.some((row) => row.includes(2048));\n  }\n\n  /**\n   *\n   * @returns true if player has at least 1 move, othrwise false\n   */\n  checkMovePossibility() {\n    if (this.getEmptyCellsCoordinates().length > 0) {\n      return true;\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const currentValue = this.checkCellByCoordinates([row, col]);\n\n        if (\n          col < 3 &&\n          currentValue === this.checkCellByCoordinates([row, col + 1])\n        ) {\n          return true;\n        }\n\n        if (\n          row < 3 &&\n          currentValue === this.checkCellByCoordinates([row + 1, col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @description Moves all tiles down.\n   * Starting from the bottom-right corner, moving left and up,\n   * each non-empty cell is moved down as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */\n  moveDown() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.currentState);\n\n    for (let col = 3; col >= 0; col--) {\n      const mergedThisMove = [false, false, false, false];\n\n      for (let row = 3; row >= 0; row--) {\n        const currentValue = this.checkCellByCoordinates([row, col]);\n\n        if (currentValue !== 0) {\n          let currentRow = row;\n          let nextRow = currentRow + 1;\n\n          // Move the tile down until it hits a non-empty cell\n          //  or the bottom of the board\n          while (\n            nextRow <= 3 &&\n            this.checkCellByCoordinates([nextRow, col]) === 0\n          ) {\n            this.currentState[nextRow][col] = currentValue;\n            this.currentState[currentRow][col] = 0;\n            currentRow = nextRow;\n            nextRow++;\n          }\n\n          // Check for a possible merge\n          if (\n            nextRow <= 3 &&\n            this.checkCellByCoordinates([nextRow, col]) === currentValue &&\n            !mergedThisMove[nextRow]\n          ) {\n            // Merge\n            this.currentState[nextRow][col] *= 2;\n            this.currentState[currentRow][col] = 0;\n            this.score += this.currentState[nextRow][col];\n            mergedThisMove[nextRow] = true;\n          }\n        }\n      }\n    }\n\n    const newState = JSON.stringify(this.currentState);\n\n    if (previousState === newState) {\n      return;\n    }\n\n    if (this.checkWinCondition()) {\n      this.status = 'win';\n    }\n\n    this.generateAndPositionNewTile();\n    this.updateTheBoard();\n\n    if (!this.checkMovePossibility()) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @description Moves all tiles up.\n   * Starting from the top-left corner, moving right and down,\n   * each non-empty cell is moved up as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */\n  moveUp() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.currentState);\n\n    for (let col = 0; col < 4; col++) {\n      const mergedThisMove = [false, false, false, false];\n\n      for (let row = 0; row < 4; row++) {\n        const currentValue = this.checkCellByCoordinates([row, col]);\n\n        if (currentValue !== 0) {\n          let currentRow = row;\n          let nextRow = currentRow - 1;\n\n          // Move the tile up until it hits a non-empty cell\n          // or the top of the board\n          while (\n            nextRow >= 0 &&\n            this.checkCellByCoordinates([nextRow, col]) === 0\n          ) {\n            this.currentState[nextRow][col] = currentValue;\n            this.currentState[currentRow][col] = 0;\n            currentRow = nextRow;\n            nextRow--;\n          }\n\n          // Check for a possible merge\n          if (\n            nextRow >= 0 &&\n            this.checkCellByCoordinates([nextRow, col]) === currentValue &&\n            !mergedThisMove[nextRow]\n          ) {\n            // Merge\n            this.currentState[nextRow][col] *= 2;\n            this.currentState[currentRow][col] = 0;\n            this.score += this.currentState[nextRow][col];\n            mergedThisMove[nextRow] = true;\n          }\n        }\n      }\n    }\n\n    const newState = JSON.stringify(this.currentState);\n\n    if (previousState === newState) {\n      return;\n    }\n\n    if (this.checkWinCondition()) {\n      this.status = 'win';\n    }\n\n    this.generateAndPositionNewTile();\n    this.updateTheBoard();\n\n    if (!this.checkMovePossibility()) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @description Moves all tiles left.\n   * Starting from the top-left corner, moving right and down,\n   * each non-empty cell is moved left as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.currentState);\n\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.currentState[row].filter((cell) => cell !== 0);\n      newRow = [...newRow, ...Array(4 - newRow.length).fill(0)];\n      this.currentState[row] = newRow;\n\n      const mergedThisMove = [false, false, false, false];\n\n      for (let col = 0; col < 3; col++) {\n        const currentValue = this.checkCellByCoordinates([row, col]);\n\n        if (\n          currentValue !== 0 &&\n          this.checkCellByCoordinates([row, col + 1]) === currentValue &&\n          !mergedThisMove[col]\n        ) {\n          this.currentState[row][col] *= 2;\n          this.currentState[row][col + 1] = 0;\n          this.score += this.currentState[row][col];\n          mergedThisMove[col] = true;\n        }\n      }\n\n      newRow = this.currentState[row].filter((cell) => cell !== 0);\n      newRow = [...newRow, ...Array(4 - newRow.length).fill(0)];\n      this.currentState[row] = newRow;\n    }\n\n    const newState = JSON.stringify(this.currentState);\n\n    if (previousState === newState) {\n      return;\n    }\n\n    if (this.checkWinCondition()) {\n      this.status = 'win';\n    }\n\n    this.generateAndPositionNewTile();\n    this.updateTheBoard();\n\n    if (!this.checkMovePossibility()) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @description Moves all tiles right.\n   * Starting from the top-right corner, moving left and down,\n   * each non-empty cell is moved right as far as possible\n   * and merged if applicable.\n   * After the movement, a new tile is generated and the board is updated.\n   */\n  moveRight() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.currentState);\n\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.currentState[row].filter((cell) => cell !== 0);\n      newRow = [...Array(4 - newRow.length).fill(0), ...newRow];\n      this.currentState[row] = newRow;\n\n      const mergedThisMove = [false, false, false, false];\n\n      for (let col = 3; col > 0; col--) {\n        const currentValue = this.checkCellByCoordinates([row, col]);\n\n        if (\n          currentValue !== 0 &&\n          this.checkCellByCoordinates([row, col - 1]) === currentValue &&\n          !mergedThisMove[col]\n        ) {\n          this.currentState[row][col] *= 2;\n          this.currentState[row][col - 1] = 0;\n          this.score += this.currentState[row][col];\n          mergedThisMove[col] = true;\n        }\n      }\n\n      newRow = this.currentState[row].filter((cell) => cell !== 0);\n      newRow = [...Array(4 - newRow.length).fill(0), ...newRow];\n      this.currentState[row] = newRow;\n    }\n\n    const newState = JSON.stringify(this.currentState);\n\n    if (previousState === newState) {\n      return;\n    }\n\n    if (this.checkWinCondition()) {\n      this.status = 'win';\n    }\n\n    this.generateAndPositionNewTile();\n    this.updateTheBoard();\n\n    if (!this.checkMovePossibility()) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @description Simply holds an update of the visual score,\n   * called after each move in the main file.\n   */\n  updateTheScore() {\n    const scoreElement = document.querySelector('.game-score');\n    scoreElement.innerText = this.score;\n  }\n  /**\n   * @returns {number} returns game score.\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]} returns current game board state.\n   */\n  getState() {\n    return this.currentState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Calls two\n   *  @method generateNewTile\n   *\n   * and\n   *  @method positionNewTile\n   *\n   * in a chain to simplify the code read.\n   */\n  generateAndPositionNewTile() {\n    this.positionNewTile(this.generateNewTile());\n  }\n  /**\n   * Creates and positions 2 new cells on the field.\n   */\n  initializeBoard() {\n    this.generateAndPositionNewTile();\n    this.generateAndPositionNewTile();\n  }\n\n  /**\n   * @description Starts the game.\n   * Changing a status, initializing the board with 2 random cells\n   * and updating UI.\n   */\n  start() {\n    this.status = 'playing';\n    this.initializeBoard();\n    this.updateTheBoard();\n  }\n\n  /**\n   * @description Resets the game.\n   * Setting a score to 0, clearing the field and calling a start() again.\n   */\n  restart() {\n    this.score = 0;\n    this.status = 'idle';\n    this.currentState = this.initialState.map((row) => [...row]);\n    this.updateTheBoard();\n    // this.updateTheScore();\n  }\n\n  /**\n   * @description Mapping through all non-empty cells, asiging 0 value to them,\n   * calling updateTheBoard() which check and fixes the styles\n   */\n  resetTheField() {\n    const cellsToReset = this.getNonEmptyCells();\n    const currentFieldState = this.getState();\n\n    cellsToReset.forEach((cell) => {\n      currentFieldState[cell[0]][cell[1]] = 0;\n    });\n\n    this.updateTheBoard();\n  }\n\n  /**\n   * @returns {number} 2 or 4, 4 has 10% chance to be generated\n   */\n  generateNewTile() {\n    return Math.random() < 0.1 ? 4 : 2;\n  }\n\n  /**\n   * Sets new random position for the passed cellValue\n   * from available empty cell spots\n   * @param {number} newTileValue - number value of new cell to place\n   * @example 2, 4, 8, etc\n   */\n  positionNewTile(newTileValue) {\n    const availableFields = this.getEmptyCellsCoordinates();\n\n    const position =\n      availableFields[Math.floor(Math.random() * availableFields.length)];\n\n    if (availableFields.length) {\n      this.getState()[position[0]][position[1]] = newTileValue;\n    } else {\n      this.checkMovePossibility();\n    }\n  }\n\n  /**\n   * @example[[0, 1], [3,2]] etc\n   * @returns {number[][]} returns all empty cell coordinates array\n   */\n  getEmptyCellsCoordinates() {\n    const possibleCoordinates = [];\n\n    for (let row = 0; row < this.getState().length; row++) {\n      for (let cell = 0; cell < this.getState()[row].length; cell++) {\n        if (this.currentState[row][cell] === 0) {\n          possibleCoordinates.push([row, cell]);\n        }\n      }\n    }\n\n    return possibleCoordinates;\n  }\n\n  /**\n   * @example [[0, 1], [3,2]] etc\n   * @returns {number[][]} returns all non-empty cell coordinates array\n   */\n  getNonEmptyCells() {\n    const cellsCoordinates = [];\n\n    for (let row = 0; row < this.getState().length; row++) {\n      for (let cell = 0; cell < this.getState()[row].length; cell++) {\n        if (this.currentState[row][cell] !== 0) {\n          cellsCoordinates.push([row, cell]);\n        }\n      }\n    }\n\n    return cellsCoordinates;\n  }\n\n  /**\n   * @param {number[]} coordinatesToCheck - array of the cell coordinates\n   *  [x, y]\n   * @returns {number} cell value by the coordinates\n   */\n  checkCellByCoordinates([row, col]) {\n    if (row >= 0 && row < 4 && col >= 0 && col < 4) {\n      return this.currentState[row][col];\n    }\n    return null;\n  }\n\n  /**\n   * Updates UI of the board.\n   * @description Mapping through all rows/cells, clearing previous styles,\n   * changing cells according to updated game board.\n   */\n  updateTheBoard() {\n    const gameField = [...document.querySelectorAll('tr.field-row')];\n    const rows = this.currentState;\n\n    if (gameField.length === 0) {\n      return;\n    }\n\n    // Going through rows\n    for (let i = 0; i < rows.length; i++) {\n      // Going through cells in row\n      for (let j = 0; j < rows[i].length; j++) {\n        const currentCell = gameField[i].children[j];\n        const currentDataCell = rows[i][j];\n\n        // Removing all previous classes and setting a base class for the cell\n        currentCell.className = 'field-cell';\n\n        // Adding an extra class, if cell is not empty\n        if (currentDataCell !== 0) {\n          currentCell.classList.add(`field-cell--${currentDataCell}`);\n          currentCell.innerText = currentDataCell;\n        } else {\n          currentCell.innerText = '';\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","TypeError","a","$3d28d7f1aac198f5$exports","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","status","score","currentState","map","row","key","value","getStatus","document","querySelector","classList","remove","some","includes","getEmptyCellsCoordinates","col","currentValue","checkCellByCoordinates","previousState","JSON","stringify","mergedThisMove","currentRow","nextRow","checkWinCondition","generateAndPositionNewTile","updateTheBoard","checkMovePossibility","_this","_loop","newRow","filter","cell","concat","fill","scoreElement","innerText","positionNewTile","generateNewTile","initializeBoard","cellsToReset","getNonEmptyCells","currentFieldState","getState","forEach","Math","random","newTileValue","availableFields","position","floor","possibleCoordinates","push","cellsCoordinates","param","_param","_s","_e","_i","_arr","_n","_d","next","done","err","gameField","querySelectorAll","rows","j","currentCell","children","currentDataCell","className","add","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","__esModule","default","$197cd56b15c33885$var$changeStartButton","button","$197cd56b15c33885$var$hideMessageContainer","messageContainer","message","addEventListener","startButton","start","restart","event","preventDefault","moveUp","moveDown","moveLeft","moveRight","isGameOver","updateTheScore"],"version":3,"file":"index.40591fff.js.map"}